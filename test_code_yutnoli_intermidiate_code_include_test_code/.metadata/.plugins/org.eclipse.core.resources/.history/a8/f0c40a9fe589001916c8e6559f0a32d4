package test.unit;

import Control.StateExpressionChange;
import java.util.Iterator;

import javax.naming.NameNotFoundException;

import java.util.ArrayList;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import junit.framework.JUnit4TestAdapter;

public class TestStateExpressionChange {
	private StateExpressionChange stateExpressionChange; // test fixture variable.
	
	/* setUp method using @Before syntax. */
	/* @Before methods are run before each test. */
	/* initializes test fixture variables(controlMain). */
	@Before 
	public void runBeforeEachTest(){
		System.out.println("Before testing.");
		StateExpressionChange stateExpressionChange
											= new StateExpressionChange();
	}
	
	/* check if convertOr2Seq works correctly. */
	@Test 
	public void testconvertOr2Seq(){
		for(int i = 0; i < 24; i++) {
			if(i >=0 && i<4) {
				assertEquals(i + 1, stateExpressionChange.convertOr2Seq(0, i));
			}
			else if(i>3 && i<8) {
				assertEquals(i + 2, stateExpressionChange.convertOr2Seq(0, i));
			}
			else if (i > 7 && i <12) {
				assertEquals(i + 3, stateExpressionChange.convertOr2Seq(0, i));
			}
			else if (i > 11 && i < 16) {
				assertEquals(i + 4, stateExpressionChange.convertOr2Seq(0, i));
			}
			else if (i > 15 && i < 18) {
				assertEquals(i + 7, stateExpressionChange.convertOr2Seq(0, i));
			}
			else if (i > 17 && i < 20) {
				assertEquals(i + 8, stateExpressionChange.convertOr2Seq(0, i));
			}
			else if (i > 19 && i < 22) {
				assertEquals(i + 16, stateExpressionChange.convertOr2Seq(0, i));
			}
			else if (i > 21 && i < 24) {
				assertEquals(i + 17, stateExpressionChange.convertOr2Seq(0, i));
			}
		}
		
		for(int i = 0; i < 4; i++) {
			if(i == 0) {
				assertEquals(22, stateExpressionChange.convertOr2Seq(1, i));
			}
			else if(i == 1) {
				assertEquals(35, stateExpressionChange.convertOr2Seq(1, i));
			}
			else if (i == 2) {
				assertEquals(28, stateExpressionChange.convertOr2Seq(1, i));
			}
			else if (i == 3) {
				assertEquals(38, stateExpressionChange.convertOr2Seq(1, i));
			}
		}
		
		for(int i = 0; i < 24; i++) {
			assertEquals(41, stateExpressionChange.convertOr2Seq(2, i);
			assertEquals(0, stateExpressionChange.convertOr2Seq(3, i));
			assertEquals(42, stateExpressionChange.convertOr2Seq(4, i));
			
		}
	}
	
	/* tear-down method using @After. */
	/* @After methods are run after each test. */
	/* frees test fixture variables(controlMain). */
	@After 
	public void runAfterFindEachTest() {
		System.out.println("After testing.");
		
		/* execute garbage collection. */
		System.gc();
		playerData = null;
	}
	
}
